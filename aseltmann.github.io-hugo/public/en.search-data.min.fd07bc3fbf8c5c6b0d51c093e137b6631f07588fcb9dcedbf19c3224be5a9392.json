[{"id":0,"href":"/docs/notes/poetry/","title":"Poetry","section":"Notes","content":" Table of Contents Lǎozǐ Lǎozǐ # I am partial to the translation of Derek Lin\nDàodéjīng - Chapter 11 (The use of what has no substantive existence) [\u0026hellip;]\nMix clay\nto create a container\nIn its emptiness, there is\nthe function of a container\n[\u0026hellip;]\nTherefore,\nthat which exists is used to create benefit\nThat which is empty is used to create functionality\nDàodéjīng - Chapter 15 (The exhibition of the qualities of the Dao) The Tao masters of antiquity\nSubtle wonders through mystery\nDepths that cannot be discerned\nBecause one cannot discern them\nTherefore one is forced to describe the appearance\nHesitant,\nlike crossing a wintry river\nCautious,\nlike fearing four neighbors\nSolemn,\nlike a guest\nLoose,\nlike ice about to melt\nGenuine,\nlike plain wood\nOpen,\nlike a valley\nOpaque,\nlike muddy water\nWho can be muddled yet desist\nIn stillness gradually become clear?\nWho can be serene yet persist\nIn motion gradually come alive?\nOne who holds this \u0026lt;i\u0026gt;Tao\u0026lt;/i\u0026gt; does not wish to be overfilled\nBecause one is not overfilled\nTherefore one can preserve and not create anew\nDàodéjīng - Chapter 20 (Being different from ordinary people) Cease learning, no more worries\nRespectful response and scornful response\nHow much is the difference?\nGoodness and evil\nHow much do they differ?\nWhat the people fear,\nI cannot be unafraid\nSo desolate! How limitless it is!\nThe people are excited\nAs if enjoying a great feast\nAs if climbing up to the terrace in spring\nI alone am quiet and uninvolved\nLike an infant\nnot yet smiling\nSo weary,\nlike having no place to return\nThe people all have surplus\nWhile I alone seem lacking\nI have the heart of a fool indeed -\nso ignorant!\nOrdinary people are bright\nI alone am muddled\nOrdinary people are scrutinizing\nI alone am obtuse\nSo tranquil, like the ocean\nSo moving, as if without limits\nThe people all have goals\nAnd I alone am stubborn and lowly\nI alone am different from them\nAnd value the nourishing mother\n"},{"id":1,"href":"/posts/aoc2024-day01/","title":"Advent of code 2024 - Day 1: Historian Hysteria","section":"Posts","content":" Table of Contents Part 1: Locations Part 2: Similarities I try to solve this year\u0026rsquo;s Advent of Code 2024 riddles in R. This is Day 1 - see https:adventofcode.com/2024/day/1\nPart 1: Locations # Lets first read the task: Throughout the Chief\u0026rsquo;s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don\u0026rsquo;t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere\u0026rsquo;s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren\u0026rsquo;t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3 4 4 3 2 5 1 3 3 9 3 3 Maybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you\u0026rsquo;ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2. The second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1. The third-smallest number in both lists is 3, so the distance between them is 0. The next numbers to pair up are 3 and 4, a distance of 1. The fifth-smallest numbers in each list are 3 and 5, a distance of 2. Finally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart. To find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\nFirst, we read the data - the fread command from the data.table package is more versatile than read.delim from base and directly reads the data as a data.table, which has some benefits.\ndata \u0026lt;- data.table::fread(\u0026#34;2024-12-01-1-aoc.txt\u0026#34;, header = FALSE) head(data) V1 V2 \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; 41226 69190 89318 10100 59419 23880 63157 20193 81510 22869 83942 63304 Now, the idea is to get the ordered versions of V1 and V2.\nv1 \u0026lt;- data[order(V1)]$V1 v2 \u0026lt;- data[order(V2)]$V2 head(v1) 10188 10314 10319 10348 10408 10668 Coming from Python, this syntax looks a bit odd. The documentation of data.table::setorder helps:\nsetorder (and setorderv) reorders the rows of a data.table based on the columns (and column order) provided. It reorders the table by reference and is therefore very memory efficient. Note that queries like x[order(.)] are optimised internally to use data.table\u0026#39;s fast order. So, data[order(V1)] is actually short for data.table::setorder(data, V1). Then, we extract the vector by name using the $ operator, which allows to extract elements by name.\nhead(data.table::setorder(data, V1)$V1) 10188 10314 10319 10348 10408 10668 The actual computation is just the sum of the absolute difference:\nsum(abs(v1 - v2)) 3574690\nPart 2: Similarities # Lets first read the task: This time, you\u0026rsquo;ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nHere are the same example lists again:\n3 4 4 3 2 5 1 3 3 9 3 3 For these example lists, here is the process of finding the similarity score:\nThe first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9. The second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4. The third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0). The fourth number, 1, also does not appear in the right list. The fifth number, 3, appears in the right list three times; the similarity score increases by 9. The last number, 3, appears in the right list three times; the similarity score again increases by 9. So, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).\nOnce again consider your left and right lists. What is their similarity score?\nMy idea here is simple - we first count the occurrences of V2 to be able to check V1 against them. Here, applying the table command works like pandas.value_counts() and achieves this. We convert the output to a data.frame and assign the V1 values as row names. Note: table converts the values which are counted to string, e.g. \u0026quot;10019\u0026quot; instead of 10019.\ntab \u0026lt;- table(v2) v2series \u0026lt;- data.frame(c(tab), row.names = names(tab)) head(v2series) v2series[\u0026#34;10019\u0026#34;, ] c.tab. \u0026lt;int\u0026gt; 10019 1 10100 1 10206 1 10428 1 10645 1 10972 1 1\nNow, we loop through V1 and try to access the frequency in V2 (by converting to string first, via as.character). If nothing is found in V2, an NA value is returned. For everything that is not NA, we compute the similarity score, append it to a list, and sum in the end. Note: a list in R can not directly be summed (I don\u0026rsquo;t know why that is) - so we have to unlist first.\nsim \u0026lt;- list() for (num in v1) { myfreq \u0026lt;- v2series[as.character(num), ] if (!is.na(myfreq)) { score \u0026lt;- myfreq * num sim \u0026lt;- append(sim, score) } } sum(unlist(sim)) 22565391\n"},{"id":2,"href":"/posts/aoc2023-day07/","title":"Advent of code 2023 - Day 7: Camel Cards","section":"Posts","content":" Table of Contents Part 1 Part 2 This year I try to record my attempt at solving the Advent of Code 2023 riddles. This is Day 7 - see https:adventofcode.com/2023/day/7\nPart 1 # Lets first read the task: In Camel Cards, you get a list of hands, and your goal is to order them based on the strength of each hand. A hand consists of five cards labeled one of A, K, Q, J, T, 9, 8, 7, 6, 5, 4, 3, or 2. The relative strength of each card follows this order, where A is the highest and 2 is the lowest.\nEvery hand is exactly one type. From strongest to weakest, they are:\nFive of a kind, where all five cards have the same label: AAAAA Four of a kind, where four cards have the same label and one card has a different label: AA8AA Full house, where three cards have the same label, and the remaining two cards share a different label: 23332 Three of a kind, where three cards have the same label, and the remaining two cards are each different from any other card in the hand: TTT98 Two pair, where two cards share one label, two other cards share a second label, and the remaining card has a third label: 23432 One pair, where two cards share one label, and the other three cards have a different label from the pair and each other: A23A4 High card, where all cards\u0026rsquo; labels are distinct: 23456 Hands are primarily ordered based on type; for example, every full house is stronger than any three of a kind.\nIf two hands have the same type, a second ordering rule takes effect. Start by comparing the first card in each hand. If these cards are different, the hand with the stronger first card is considered stronger. If the first card in each hand have the same label, however, then move on to considering the second card in each hand. If they differ, the hand with the higher second card wins; otherwise, continue with the third card in each hand, then the fourth, then the fifth.\nSo, 33332 and 2AAAA are both four of a kind hands, but 33332 is stronger because its first card is stronger. Similarly, 77888 and 77788 are both a full house, but 77888 is stronger because its third card is stronger (and both hands have the same first and second card).\nTo play Camel Cards, you are given a list of hands and their corresponding bid (your puzzle input). For example:\n32T3K 765 T55J5 684 KK677 28 KTJJT 220 QQQJA 483 This example shows five hands; each hand is followed by its bid amount. Each hand wins an amount equal to its bid multiplied by its rank, where the weakest hand gets rank 1, the second-weakest hand gets rank 2, and so on up to the strongest hand. Because there are five hands in this example, the strongest hand will have rank 5 and its bid will be multiplied by 5.\nSo, the first step is to put the hands in order of strength:\n32T3K is the only one pair and the other hands are all a stronger type, so it gets rank 1. KK677 and KTJJT are both two pair. Their first cards both have the same label, but the second card of KK677 is stronger (K vs T), so KTJJT gets rank 2 and KK677 gets rank 3. T55J5 and QQQJA are both three of a kind. QQQJA has a stronger first card, so it gets rank 5 and T55J5 gets rank 4. Now, you can determine the total winnings of this set of hands by adding up the result of multiplying each hand\u0026rsquo;s bid with its rank (765 * 1 + 220 * 2 + 28 * 3 + 684 * 4 + 483 * 5). So the total winnings in this example are 6440.\nFind the rank of every hand in your set. What are the total winnings?\nAs always - let\u0026rsquo;s read in the data.\nimport pandas as pd camel = pd.read_table(\u0026#39;data/2023-12-07-1-aoc.txt\u0026#39;, delim_whitespace=True, header=None, names=[\u0026#39;cards\u0026#39;, \u0026#39;bid\u0026#39;], dtype={\u0026#39;cards\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;bid\u0026#39;: \u0026#39;Int64\u0026#39;}) camel cards bid 0 A833A 309 1 Q33J3 205 2 55KK5 590 3 K4457 924 4 Q3QT3 11 \u0026hellip; \u0026hellip; \u0026hellip; 995 KQJ53 367 996 57866 537 997 Q94A9 210 998 J448A 903 999 6J66J 114 1000 rows × 2 columns\nFor sorting, we need to compute a type column. The 7 types can be deduced based on how many different cards are there (through set()) and the number of cards.\nAlso, for the next step we prepare one column per card string in the cards.\ndef get_type(cards): cardset = set(cards) cardlen = len(cardset) cardlist = list(cards) cardnum = [cardlist.count(i) for i in cardset] if cardlen == 1: ctype = 1 elif cardlen in (4, 5): ctype = cardlen + 2 elif cardlen == 2: ctype = 2 if set(cardnum) == {1, 4} else 3 else: ctype = 4 if 3 in cardnum else 5 return ctype camel[\u0026#39;type\u0026#39;] = camel.loc[:, \u0026#39;cards\u0026#39;].apply(lambda x: get_type(x)) for i in range(5): camel[f\u0026#39;c{i}\u0026#39;] = camel.loc[:, \u0026#39;cards\u0026#39;].apply(lambda x: list(x)[i]) camel cards bid type c0 c1 c2 c3 c4 0 A833A 309 5 A 8 3 3 A 1 Q33J3 205 4 Q 3 3 J 3 2 55KK5 590 3 5 5 K K 5 3 K4457 924 6 K 4 4 5 7 4 Q3QT3 11 5 Q 3 Q T 3 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 995 KQJ53 367 7 K Q J 5 3 996 57866 537 6 5 7 8 6 6 997 Q94A9 210 6 Q 9 4 A 9 998 J448A 903 6 J 4 4 8 A 999 6J66J 114 3 6 J 6 6 J 1000 rows × 8 columns\nFor sorting, pandas contributes the sort_values method, which supports sorting by multiple columns (here, we first sort according to type, then c0, c1, \u0026hellip;). For easier sorting by numerical values, we convert the values using the card_dict dictionary, which implements the given sorting order.\ncard_dict = {c: i for i, c in enumerate([7, 6, 5, 4, 3, 2, 1, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;A\u0026#39;])} camel = camel.sort_values(by=[\u0026#39;type\u0026#39;, \u0026#39;c0\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;c4\u0026#39;], ignore_index=True, key=lambda x: x.map(card_dict)) camel.index += 1 camel cards bid type c0 c1 c2 c3 c4 1 237AQ 157 7 2 3 7 A Q 2 23K47 759 7 2 3 K 4 7 3 249K8 612 7 2 4 9 K 8 4 264A7 341 7 2 6 4 A 7 5 26578 10 7 2 6 5 7 8 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 996 AA5AA 565 2 A A 5 A A 997 AAATA 704 2 A A A T A 998 AAAA3 145 2 A A A A 3 999 AAAAJ 594 2 A A A A J 1000 JJJJJ 219 1 J J J J J 1000 rows × 8 columns\nLastly, we multiply the bid with the index and sum the result.\ncamel.loc[:, \u0026#39;bid\u0026#39;].mul(camel.index).sum() 246912307 Part 2 # Lets first read the task: To make things a little more interesting, the Elf introduces one additional rule. Now, J cards are jokers - wildcards that can act like whatever card would make the hand the strongest type possible.\nTo balance this, J cards are now the weakest individual cards, weaker even than 2. The other cards stay in the same order: A, K, Q, T, 9, 8, 7, 6, 5, 4, 3, 2, J.\nJ cards can pretend to be whatever card is best for the purpose of determining hand type; for example, QJJQ2 is now considered four of a kind. However, for the purpose of breaking ties between two hands of the same type, J is always treated as J, not the card it\u0026rsquo;s pretending to be: JKKK2 is weaker than QQQQ2 because J is weaker than Q.\nNow, the above example goes very differently:\n32T3K 765 T55J5 684 KK677 28 KTJJT 220 QQQJA 483 32T3K is still the only one pair; it doesn\u0026rsquo;t contain any jokers, so its strength doesn\u0026rsquo;t increase. KK677 is now the only two pair, making it the second-weakest hand. T55J5, KTJJT, and QQQJA are now all four of a kind! T55J5 gets rank 3, QQQJA gets rank 4, and KTJJT gets rank 5. With the new joker rule, the total winnings in this example are 5905.\nUsing the new joker rule, find the rank of every hand in your set. What are the new total winnings?\nWhat changes? We have to update our get_type() function and our card_dict dictionary, otherwise the method stays the same!\nLet\u0026rsquo;s first write get_type_joker(): if no joker is in the cards, we can just refer to get_type(). If we have 1, 2 or 5 different card faces, the answer is trivial. We only have to use the number of jokers and the maximum number of other faces if we have 3 or 4 different faces.\nNote: if a J is present, there can never be high card (type = 7), because we always can get one pair. Also we can never get two pair (type = 5), because we can always construct three of a kind or full house.\ndef get_type_joker(cards): cardset = set(cards) cardlen = len(cardset) cardlist = list(cards) cardnum = [cardlist.count(i) for i in cardset] if not \u0026#39;J\u0026#39; in cardset: ctype = get_type(cards) else: idxj = list(cardset).index(\u0026#39;J\u0026#39;) numj = cardnum[idxj] cardnum.pop(idxj) if cardlen in [1, 2]: ctype = 1 elif cardlen == 5: ctype = 6 else: if (numj in [1, 2]) and (cardlen == 4): ctype = 4 else: ctype = 6 - max(cardnum) - numj return ctype camel[\u0026#39;type\u0026#39;] = camel.loc[:, \u0026#39;cards\u0026#39;].apply(lambda x: get_type_joker(x)) camel cards bid type c0 c1 c2 c3 c4 1 237AQ 157 7 2 3 7 A Q 2 23K47 759 7 2 3 K 4 7 3 249K8 612 7 2 4 9 K 8 4 264A7 341 7 2 6 4 A 7 5 26578 10 7 2 6 5 7 8 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 996 AA5AA 565 2 A A 5 A A 997 AAATA 704 2 A A A T A 998 AAAA3 145 2 A A A A 3 999 AAAAJ 594 1 A A A A J 1000 JJJJJ 219 1 J J J J J 1000 rows × 8 columns\nNow, we just move J in our new card_dict_joker to where it belongs, the rest of the solution is the same.\ncard_dict_joker = {c: i for i, c in enumerate( [7, 6, 5, 4, 3, 2, 1, \u0026#39;J\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;A\u0026#39;])} camel = camel.sort_values(by=[\u0026#39;type\u0026#39;, \u0026#39;c0\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;c4\u0026#39;], ignore_index=True, key=lambda x: x.map(card_dict_joker)) camel.index += 1 display(camel) print(\u0026#39;Our new solution: \u0026#39;, camel.loc[:, \u0026#39;bid\u0026#39;].mul(camel.index).sum()) cards bid type c0 c1 c2 c3 c4 1 237AQ 157 7 2 3 7 A Q 2 23K47 759 7 2 3 K 4 7 3 249K8 612 7 2 4 9 K 8 4 264A7 341 7 2 6 4 A 7 5 26578 10 7 2 6 5 7 8 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 996 TJTTJ 609 1 T J T T J 997 QQJQJ 131 1 Q Q J Q J 998 QQQJQ 831 1 Q Q Q J Q 999 KKKJK 183 1 K K K J K 1000 AAAAJ 594 1 A A A A J 1000 rows × 8 columns\nOur new solution: 246894760 "},{"id":3,"href":"/posts/aoc2023-day06/","title":"Advent of code 2023 - Day 6: Wait For It","section":"Posts","content":" Table of Contents Part 1 Part 2 This year I try to record my attempt at solving the Advent of Code 2023 riddles. This is Day 6 - see https:adventofcode.com/2023/day/6\nPart 1 # Lets first read the task: You manage to sign up as a competitor in the boat races just in time. The organizer explains that it\u0026rsquo;s not really a traditional race - instead, you will get a fixed amount of time during which your boat has to travel as far as it can, and you win if your boat goes the farthest.\nAs part of signing up, you get a sheet of paper (your puzzle input) that lists the time allowed for each race and also the best distance ever recorded in that race. To guarantee you win the grand prize, you need to make sure you go farther in each race than the current record holder.\nThe organizer brings you over to the area where the boat races are held. The boats are much smaller than you expected - they\u0026rsquo;re actually toy boats, each with a big button on top. Holding down the button charges the boat, and releasing the button allows the boat to move. Boats move faster if their button was held longer, but time spent holding the button counts against the total race time. You can only hold the button at the start of the race, and boats don\u0026rsquo;t move until the button is released.\nFor example:\nTime: 7 15 30 Distance: 9 40 200 This document describes three races:\nThe first race lasts 7 milliseconds. The record distance in this race is 9 millimeters. The second race lasts 15 milliseconds. The record distance in this race is 40 millimeters. The third race lasts 30 milliseconds. The record distance in this race is 200 millimeters. Your toy boat has a starting speed of zero millimeters per millisecond. For each whole millisecond you spend at the beginning of the race holding down the button, the boat\u0026rsquo;s speed increases by one millimeter per millisecond.\nSo, because the first race lasts 7 milliseconds, you only have a few options:\nDon\u0026rsquo;t hold the button at all (that is, hold it for 0 milliseconds) at the start of the race. The boat won\u0026rsquo;t move; it will have traveled 0 millimeters by the end of the race. Hold the button for 1 millisecond at the start of the race. Then, the boat will travel at a speed of 1 millimeter per millisecond for 6 milliseconds, reaching a total distance traveled of 6 millimeters. Hold the button for 2 milliseconds, giving the boat a speed of 2 millimeters per millisecond. It will then get 5 milliseconds to move, reaching a total distance of 10 millimeters. Hold the button for 3 milliseconds. After its remaining 4 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 4 milliseconds. After its remaining 3 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 5 milliseconds, causing the boat to travel a total of 10 millimeters. Hold the button for 6 milliseconds, causing the boat to travel a total of 6 millimeters. Hold the button for 7 milliseconds. That\u0026rsquo;s the entire duration of the race. You never let go of the button. The boat can\u0026rsquo;t move until you let go of the button. Please make sure you let go of the button so the boat gets to move. 0 millimeters. Since the current record for this race is 9 millimeters, there are actually 4 different ways you could win: you could hold the button for 2, 3, 4, or 5 milliseconds at the start of the race.\nIn the second race, you could hold the button for at least 4 milliseconds and at most 11 milliseconds and beat the record, a total of 8 different ways to win.\nIn the third race, you could hold the button for at least 11 milliseconds and no more than 19 milliseconds and still beat the record, a total of 9 ways you could win.\nTo see how much margin of error you have, determine the number of ways you can beat the record in each race; in this example, if you multiply these values together, you get 288 (4 * 8 * 9).\nDetermine the number of ways you could beat the record in each race. What do you get if you multiply these numbers together?\nThe solution for this problem is shorter than the task description!\nAs always - let\u0026rsquo;s load the data. Note: we use the delim_whitesspace argument instead of sep=' ' to separate values by spaces of any length.\nimport pandas as pd import numpy as np race = pd.read_table(\u0026#39;data/2023-12-06-1-aoc.txt\u0026#39;, delim_whitespace=True, header=None, index_col=0) race.index = [\u0026#39;time\u0026#39;, \u0026#39;distance\u0026#39;] race 1 2 3 4 time 51 92 68 90 distance 222 2031 1126 1225 The we use Python list comprehensions to quickly calculate all distances for the range of the time value (and keep only the winning distances). Then we get the respective lengths and compute the product.\ndef get_distance(time, distance): return [t * (time - t) for t in range(1, time + 1) if (t * (time - t)) \u0026gt; distance] race.loc[\u0026#39;nwins\u0026#39;, :] = [len(get_distance(int(r.time), int(r.distance))) for c, r in race.items()] nwins_prod = np.prod(race.loc[\u0026#39;nwins\u0026#39;, :].values, dtype=int) display(race) print(f\u0026#39;The product of our nwins is {nwins_prod}\u0026#39;) 1 2 3 4 time 51.0 92.0 68.0 90.0 distance 222.0 2031.0 1126.0 1225.0 nwins 42.0 19.0 11.0 57.0 The product of our nwins is 500346 Part 2 # Lets first read the task: As the race is about to start, you realize the piece of paper with race times and record distances you got earlier actually just has very bad kerning. There\u0026rsquo;s really only one race - ignore the spaces between the numbers on each line.\nSo, the example from before:\nTime: 7 15 30 Distance: 9 40 200 \u0026hellip;now instead means this:\nTime: 71530 Distance: 940200 Now, you have to figure out how many ways there are to win this single race. In this example, the race lasts for 71530 milliseconds and the record distance you need to beat is 940200 millimeters. You could hold the button anywhere from 14 to 71516 milliseconds and beat the record, a total of 71503 ways!\nHow many ways can you beat the record in this one much longer race?\nFor this riddle we can take the same approach as for Part 1. The cell took 18s to evaluate on a consumer laptop from 2015 - no fancy workarounds needed :)\nracetime = int(\u0026#39;\u0026#39;.join(str(r) for r in race.loc[\u0026#39;time\u0026#39;, :4].astype(int))) racedist = int(\u0026#39;\u0026#39;.join(str(r) for r in race.loc[\u0026#39;distance\u0026#39;, :4].astype(int))) racewins = len(get_distance(racetime, racedist)) race[5] = [racetime, racedist, racewins] race 1 2 3 4 5 time 51.0 92.0 68.0 90.0 51926890 distance 222.0 2031.0 1126.0 1225.0 222203111261225 nwins 42.0 19.0 11.0 57.0 42515755 "},{"id":4,"href":"/posts/aoc2023-day05/","title":"Advent of code 2023 - Day 5: If You Give A Seed A Fertilizer","section":"Posts","content":" Table of Contents Part 1 Part 2 This year I try to record my attempt at solving the Advent of Code 2023 riddles. This is Day 5 - see https:adventofcode.com/2023/day/5\nUpdate [2023-12-31 So]:\nsubstitute get_generator() (own implementation) with range() (Python inbuilt) improve grid search so that it goes through all location ranges, still starting with the lowest range Part 1 # Lets first read the task: The almanac (your puzzle input) lists all of the seeds that need to be planted. It also lists what type of soil to use with each kind of seed, what type of fertilizer to use with each kind of soil, what type of water to use with each kind of fertilizer, and so on. Every type of seed, soil, fertilizer and so on is identified with a number, but numbers are reused by each category - that is, soil 123 and fertilizer 123 aren\u0026rsquo;t necessarily related to each other.\nFor example:\nseeds: 79 14 55 13 seed-to-soil map: 50 98 2 52 50 48 soil-to-fertilizer map: 0 15 37 37 52 2 39 0 15 fertilizer-to-water map: 49 53 8 0 11 42 42 0 7 57 7 4 water-to-light map: 88 18 7 18 25 70 light-to-temperature map: 45 77 23 81 45 19 68 64 13 temperature-to-humidity map: 0 69 1 1 0 69 humidity-to-location map: 60 56 37 56 93 4 The almanac starts by listing which seeds need to be planted: seeds 79, 14, 55, and 13.\nThe rest of the almanac contains a list of maps which describe how to convert numbers from a source category into numbers in a destination category. That is, the section that starts with seed-to-soil map: describes how to convert a seed number (the source) to a soil number (the destination). This lets the gardener and his team know which soil to use with which seeds, which water to use with which fertilizer, and so on.\nRather than list every source number and its corresponding destination number one by one, the maps describe entire ranges of numbers that can be converted. Each line within a map contains three numbers: the destination range start, the source range start, and the range length.\nConsider again the example seed-to-soil map:\n50 98 2 52 50 48\nThe first line has a destination range start of 50, a source range start of 98, and a range length of 2. This line means that the source range starts at 98 and contains two values: 98 and 99. The destination range is the same length, but it starts at 50, so its two values are 50 and 51. With this information, you know that seed number 98 corresponds to soil number 50 and that seed number 99 corresponds to soil number 51. o The second line means that the source range starts at 50 and contains 48 values: 50, 51, \u0026hellip;, 96, 97. This corresponds to a destination range starting at 52 and also containing 48 values: 52, 53, \u0026hellip;, 98, 99. So, seed number 53 corresponds to soil number 55.\nAny source numbers that aren\u0026rsquo;t mapped correspond to the same destination number. So, seed number 10 corresponds to soil number 10.\nSo, the entire list of seed numbers and their corresponding soil numbers looks like this:\nseed soil 0 0 1 1 ... ... 48 48 49 49 50 52 51 53 ... ... 96 98 97 99 98 50 99 51 With this map, you can look up the soil number required for each initial seed number:\nSeed number 79 corresponds to soil number 81. Seed number 14 corresponds to soil number 14. Seed number 55 corresponds to soil number 57. Seed number 13 corresponds to soil number 13. The gardener and his team want to get started as soon as possible, so they\u0026rsquo;d like to know the closest location that needs a seed. Using these maps, find the lowest location number that corresponds to any of the initial seeds. To do this, you\u0026rsquo;ll need to convert each seed number through other categories until you can find its corresponding location number. In this example, the corresponding types are:\nSeed 79, soil 81, fertilizer 81, water 81, light 74, temperature 78, humidity 78, location 82. Seed 14, soil 14, fertilizer 53, water 49, light 42, temperature 42, humidity 43, location 43. Seed 55, soil 57, fertilizer 57, water 53, light 46, temperature 82, humidity 82, location 86. Seed 13, soil 13, fertilizer 52, water 41, light 34, temperature 34, humidity 35, location 35. So, the lowest location number in this example is 35.\nWhat is the lowest location number that corresponds to any of the initial seed numbers?\nWow, this task is a mouthful\u0026hellip;\nLet\u0026rsquo;s start slowly and load the data. Our input text document contains several maps, which are clearly separated and have a title (seed-to-soil map etc). So we can tell pandas where each map starts and give each map a dataframe. I got the values for the skiprows and nrows argument by looking at the input file and\u0026hellip; counting :)\nimport pandas as pd import sys seeds = pd.read_table(\u0026#39;data/2023-12-05-1-aoc.txt\u0026#39;, nrows=1, sep=\u0026#39; \u0026#39;, header=None, index_col=0) seeds = seeds.values.flatten() map_opt = {\u0026#39;filepath_or_buffer\u0026#39;: \u0026#39;data/2023-12-05-1-aoc.txt\u0026#39;, \u0026#39;header\u0026#39;: None, \u0026#39;sep\u0026#39;: \u0026#39; \u0026#39;, \u0026#39;dtype\u0026#39;: \u0026#39;Int64\u0026#39;, \u0026#39;names\u0026#39;: [\u0026#39;dest_start\u0026#39;, \u0026#39;src_start\u0026#39;, \u0026#39;range\u0026#39;]} seed_soil = pd.read_table(skiprows=3, nrows=23, **map_opt) soil_fert = pd.read_table(skiprows=28, nrows=9, **map_opt) fert_water = pd.read_table(skiprows=39, nrows=20, **map_opt) water_light = pd.read_table(skiprows=61, nrows=40, **map_opt) light_temp = pd.read_table(skiprows=103, nrows=36, **map_opt) temp_humi = pd.read_table(skiprows=141, nrows=35, **map_opt) humi_loc = pd.read_table(skiprows=178, nrows=26, **map_opt) maps = (seed_soil, soil_fert, fert_water, water_light, light_temp, temp_humi, humi_loc) print(\u0026#39;seeds are just a numpy array:\u0026#39;) display(seeds) print(\u0026#39;The \u0026#34;humidity-to-location\u0026#34; map as an example:\u0026#39;) humi_loc seeds are just a numpy array: array([3169137700, 271717609, 3522125441, 23376095, 1233948799, 811833837, 280549587, 703867355, 166086528, 44766996, 2326968141, 69162222, 2698492851, 14603069, 2755327667, 348999531, 2600461189, 92332846, 1054656969, 169099767])The \u0026#34;humidity-to-location\u0026#34; map as an example: dest_start src_start range 0 3490144003 1623866227 218040905 1 1709610578 1620839197 3027030 2 105449249 586389428 113279526 3 1899604338 2167886292 348178199 4 1712637608 2678624215 186966730 5 218728775 0 245776251 6 2472992580 923734334 143670388 7 2616662968 3670169885 15297294 8 2247782537 1395629154 225210043 9 0 480940179 105449249 10 4113852846 3959729057 159909096 11 3322784653 1067404722 167359350 12 923734334 4119638153 175329143 13 1534964496 2516064491 162559724 14 2631960262 3496028440 140849733 15 2862695906 1234764072 97988355 16 1697524220 3636878173 12086358 17 2985646048 1332752427 62876727 18 1099063477 2970241510 435901019 19 4009202281 2865590945 104650565 20 2960684261 2142924505 24961787 21 2772809995 3406142529 89885911 22 4273761942 3648964531 21205354 23 3708184908 1841907132 301017373 24 464505026 245776251 235163928 25 3048522775 3685467179 274261878 My first attempt was to actually construct ranges like in the example above, mapping out all possible sources and destinations. Python quickly informed me that even constructing one pandas.Series with int64 values mapping seeds to soil would cost 64GB memory - not the best solution.\nSo we take a different approach. For convenience, let\u0026rsquo;s add a src_end and a dest_end column to our maps:\nfor df in maps: df[\u0026#39;src_end\u0026#39;] = df.loc[:, \u0026#39;src_start\u0026#39;] + df.loc[:, \u0026#39;range\u0026#39;] df[\u0026#39;dest_end\u0026#39;] = df.loc[:, \u0026#39;dest_start\u0026#39;] + df.loc[:, \u0026#39;range\u0026#39;] print(\u0026#39;Again the \u0026#34;humidity-to-location\u0026#34; map as an example:\u0026#39;) humi_loc Again the \u0026#34;humidity-to-location\u0026#34; map as an example: dest_start src_start range src_end dest_end 0 3490144003 1623866227 218040905 1841907132 3708184908 1 1709610578 1620839197 3027030 1623866227 1712637608 2 105449249 586389428 113279526 699668954 218728775 3 1899604338 2167886292 348178199 2516064491 2247782537 4 1712637608 2678624215 186966730 2865590945 1899604338 5 218728775 0 245776251 245776251 464505026 6 2472992580 923734334 143670388 1067404722 2616662968 7 2616662968 3670169885 15297294 3685467179 2631960262 8 2247782537 1395629154 225210043 1620839197 2472992580 9 0 480940179 105449249 586389428 105449249 10 4113852846 3959729057 159909096 4119638153 4273761942 11 3322784653 1067404722 167359350 1234764072 3490144003 12 923734334 4119638153 175329143 4294967296 1099063477 13 1534964496 2516064491 162559724 2678624215 1697524220 14 2631960262 3496028440 140849733 3636878173 2772809995 15 2862695906 1234764072 97988355 1332752427 2960684261 16 1697524220 3636878173 12086358 3648964531 1709610578 17 2985646048 1332752427 62876727 1395629154 3048522775 18 1099063477 2970241510 435901019 3406142529 1534964496 19 4009202281 2865590945 104650565 2970241510 4113852846 20 2960684261 2142924505 24961787 2167886292 2985646048 21 2772809995 3406142529 89885911 3496028440 2862695906 22 4273761942 3648964531 21205354 3670169885 4294967296 23 3708184908 1841907132 301017373 2142924505 4009202281 24 464505026 245776251 235163928 480940179 699668954 25 3048522775 3685467179 274261878 3959729057 3322784653 Now we actually compute the mapping. For each seed, we go through all mappings and in each mapping we go through each row. We find the row which contains the mapping and exctract the destination, which is the source for the next map until we reach the last map which gives us the locations.\nApproach 1: df.itertuples() is a convenient way to step through a pandas.DataFrame in this example. It is faster than df.iterrows() and returns the row as a NamedTuple - nice!\nApproach 2: I actually wondered if it would be faster to get all maps in one pd.DataFrame and then iterate through the mappings. To test this let\u0026rsquo;s construct a new DataFrame maps_df which contains all maps. Since the maps have different lengths it is important to cast the datatype to Int64, which is short for pd.Int64Dtype() and keeps values as integers, even if NA values are in the same column.\nApproach 3: A third alternative I tested (not shown here) was to check if a value is in a Python range with the in operator as in: if 3 in range(5):... . This was way too slow.\n# mapping version 1 def get_location(seed): current = seed for df in maps: current_map = [row for row in df.itertuples() if ((current \u0026gt; row.src_start) and (current \u0026lt; row.src_end))] if len(current_map) == 0: pass elif len(current_map) == 1: current = (current_map[0].dest_start + (current - current_map[0].src_start)) else: raise ValueError(\u0026#39;This should not happen!\u0026#39;) return current # mapping version 2 - around 10 times slower # you need to rename the maps_df columns so that they have a unique id # e.g. \u0026#39;src_start_1\u0026#39;, \u0026#39;src_start_2\u0026#39; etc # maps_df = pd.concat(maps, axis=\u0026#39;columns\u0026#39;) # def get_dest(i, src): # return (maps_df[(src \u0026gt; maps_df.loc[:, f\u0026#39;src_start_{i}\u0026#39;]) \u0026amp; # (src \u0026lt; maps_df.loc[:, f\u0026#39;src_end_{i}\u0026#39;])] # .loc[:, f\u0026#39;dest_start_{i}\u0026#39;] # .iloc[0]) # def get_location2(seed): # dest = seed # i = 1 # while i \u0026lt; 7: # dest = get_dest(i, dest) # i += 1 # return dest %timeit get_location(seeds[0]) 1.98 ms ± 72 μs per loop (mean ± std. dev. of 7 runs, 100 loops each) Now let\u0026rsquo;s get a list of locations:\nlocations = [get_location(s) for s in seeds] locations 2493982655 3209845376 3992357533 4163131463 4104485616 1952252479 3218677354 388071289 2181441450 2594336315 4049507670 2084517144 3119633635 428978312 3518771991 3704555655 953918455 2107687768 3448046330 2184454689 Lastly, just get the minimum of all location values.\nmin(locations) 388071289 Part 2 # Let\u0026rsquo;s read the task of part 2! Everyone will starve if you only plant such a small number of seeds. Re-reading the almanac, it looks like the seeds: line actually describes ranges of seed numbers.\nThe values on the initial seeds: line come in pairs. Within each pair, the first value is the start of the range and the second value is the length of the range. So, in the first line of the example above:\nseeds: 79 14 55 13\nThis line describes two ranges of seed numbers to be planted in the garden. The first range starts with seed number 79 and contains 14 values: 79, 80, \u0026hellip;, 91, 92. The second range starts with seed number 55 and contains 13 values: 55, 56, \u0026hellip;, 66, 67.\nNow, rather than considering four seed numbers, you need to consider a total of 27 seed numbers.\nIn the above example, the lowest location number can be obtained from seed number 82, which corresponds to soil 84, fertilizer 84, water 84, light 77, temperature 45, humidity 46, and location 46. So, the lowest location number is 46.\nConsider all of the initial seed numbers listed in the ranges on the first line of the almanac. What is the lowest location number that corresponds to any of the initial seed numbers?\nLet\u0026rsquo;s first construct a dataframe containing the range of seeds:\nseeds_df = pd.DataFrame({\u0026#39;start\u0026#39;: seeds[::2], \u0026#39;range\u0026#39;: seeds[1::2], \u0026#39;end\u0026#39;: seeds[::2] + seeds[1::2]}) print(f\u0026#39;There are {sum(seeds_df.loc[:, \u0026#34;range\u0026#34;]):_} seeds in total\u0026#39;) seeds_df There are 2_549_759_327 seeds in total start range end 0 3169137700 271717609 3440855309 1 3522125441 23376095 3545501536 2 1233948799 811833837 2045782636 3 280549587 703867355 984416942 4 166086528 44766996 210853524 5 2326968141 69162222 2396130363 6 2698492851 14603069 2713095920 7 2755327667 348999531 3104327198 8 2600461189 92332846 2692794035 9 1054656969 169099767 1223756736 Now - I really needed some time to finally realize, that going through all seed values is really unfeasable. So how do we deal with this problem?\nIn the end we need the lowest location number - thus our approach is to take the humi_loc map, start with the lowest location number and go up and get the corresponding seed values. The location of the first seed value which is inside seeds_df is our solution.\nSo first we rebuild the get_location function to a get_seed function (we reverse the maps tuple with maps[::-1] and switch src and dest).\ndef get_seed(location): current = location for df in maps[::-1]: current_map = [row for row in df.itertuples() if ((current \u0026gt;= row.dest_start) and (current \u0026lt; row.dest_end))] if len(current_map) == 0: pass elif len(current_map) == 1: current = (current_map[0].src_start + (current - current_map[0].dest_start)) else: raise ValueError(\u0026#39;This should not happen!\u0026#39;) return current Since the Python 3 range function does not store it\u0026rsquo;s contents in memory (similar to a generator), it is well suited to go through these large ranges.\nLastly, we deal with the sheer amount of possible values by performing a grid search. First, we check every millionth location. After the first match, we stop this search and check the last million locations before the match with a finer grid and so on. The last grid is just 1, so we find our lowest location.\nUpdate: We order our locations from smallest to largest with sort_values and go through them - but the search stops after the first match, since that will be our lowest location.\ndef grid_search(start: int, end: int, grid: list[int]): success = False for g in grid: print(f\u0026#39;Start search with grid={g}\u0026#39;) for l in range(start, end, g): current = get_seed(l) if any((current \u0026gt;= seeds_df.loc[:, \u0026#39;start\u0026#39;]) \u0026amp; (current \u0026lt; seeds_df.loc[:, \u0026#39;end\u0026#39;])): print(f\u0026#39;location {l} is the lowest which contains one of the given seeds ({current})\u0026#39;) start = l - g end = l success = True break return success for row in humi_loc.sort_values(\u0026#39;dest_start\u0026#39;).itertuples(): success = grid_search(start=row.dest_start, end=row.dest_end, grid=[1_000_000, 100_000, 1000, 1]) if success: print(\u0026#39;Finished search\u0026#39;) break Start search with grid=1000000 location 85000000 is the lowest which contains one of the given seeds (2605777210) Start search with grid=100000 location 84300000 is the lowest which contains one of the given seeds (2605077210) Start search with grid=1000 location 84207000 is the lowest which contains one of the given seeds (2604984210) Start search with grid=1 location 84206669 is the lowest which contains one of the given seeds (2604983879) Finished search "},{"id":5,"href":"/posts/aoc2023-day04/","title":"Advent of code 2023 - Day 4: Scratchcards","section":"Posts","content":" Table of Contents Part 1 Part 2 This year I try to record my attempt at solving the Advent of Code 2023 riddles. This is Day 4 - see https:adventofcode.com/2023/day/4\nPart 1 # Lets first read the task: The Elf leads you over to the pile of colorful cards. There, you discover dozens of scratchcards, all with their opaque covering already scratched off. Picking one up, it looks like each card has two lists of numbers separated by a vertical bar (|): a list of winning numbers and then a list of numbers you have. You organize the information into a table (your puzzle input).\nAs far as the Elf has been able to figure out, you have to figure out which of the numbers you have appear in the list of winning numbers. The first match makes the card worth one point and each match after the first doubles the point value of that card.\nFor example:\nCard 1: 41 48 83 86 17 | 83 86 6 31 17 9 48 53 Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19 Card 3: 1 21 53 59 44 | 69 82 63 72 16 21 14 1 Card 4: 41 92 73 84 69 | 59 84 76 51 58 5 54 83 Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36 Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11 In the above example, card 1 has five winning numbers (41, 48, 83, 86, and 17) and eight numbers you have (83, 86, 6, 31, 17, 9, 48, and 53). Of the numbers you have, four of them (48, 83, 17, and 86) are winning numbers! That means card 1 is worth 8 points (1 for the first match, then doubled three times for each of the three matches after the first).\nCard 2 has two winning numbers (32 and 61), so it is worth 2 points. Card 3 has two winning numbers (1 and 21), so it is worth 2 points. Card 4 has one winning number (84), so it is worth 1 point. Card 5 has no winning numbers, so it is worth no points. Card 6 has no winning numbers, so it is worth no points. So, in this example, the Elf\u0026rsquo;s pile of scratchcards is worth 13 points.\nTake a seat in the large pile of colorful cards. How many points are they worth in total?\nLoading this data is very similar to Day 2 - so let\u0026rsquo;s load the data as we did there. Our goal is to get win and yours columns holding the respective digits which we want to compare. We find the numbers with one or more digits using the regex \\d+. And we want them to be in sets (not lists), as we can logically compare sets in Python.\nimport pandas as pd import re txt = pd.read_table(\u0026#39;data/2023-12-04-1-aoc.txt\u0026#39;, names=[\u0026#39;win\u0026#39;]) txt[\u0026#39;id\u0026#39;] = txt.loc[:, \u0026#39;win\u0026#39;].str.split(\u0026#39;:\u0026#39;).apply( lambda x: int(x[0].strip(\u0026#39;Card \u0026#39;))) txt[\u0026#39;win\u0026#39;] = (txt.loc[:, \u0026#39;win\u0026#39;] .str.split(\u0026#39;:\u0026#39;).apply(lambda x: x[1])) txt[\u0026#39;yours\u0026#39;] = (txt.loc[:, \u0026#39;win\u0026#39;] .str.split(\u0026#39;|\u0026#39;) .apply(lambda x: x[1]) # get a list of only the numbers / digits .apply(lambda x: re.findall(r\u0026#39;\\d+\u0026#39;, x)) # convert the list of strings to a set of integers .apply(lambda x: set([int(i) for i in x]))) txt[\u0026#39;win\u0026#39;] = (txt.loc[:, \u0026#39;win\u0026#39;] .str.split(\u0026#39;|\u0026#39;) .apply(lambda x: x[0]) .apply(lambda x: re.findall(r\u0026#39;\\d+\u0026#39;, x)) .apply(lambda x: set([int(i) for i in x]))) txt win id yours 0 {32, 36, 7, 9, 10, 12, 82, 85, 95, 31} 1 {2, 7, 9, 10, 12, 14, 21, 22, 23, 24, 31, 32, \u0026hellip; 1 {35, 76, 16, 82, 19, 22, 88, 59, 60, 95} 2 {7, 8, 12, 16, 19, 22, 26, 28, 35, 38, 44, 51,\u0026hellip; 2 {1, 70, 11, 78, 48, 19, 52, 88, 28, 94} 3 {3, 4, 8, 17, 18, 19, 24, 31, 34, 45, 52, 54, \u0026hellip; 3 {65, 2, 72, 28, 14, 16, 55, 91, 92, 62} 4 {3, 4, 6, 7, 8, 9, 15, 30, 33, 35, 47, 49, 51,\u0026hellip; 4 {38, 41, 75, 77, 50, 24, 94, 60, 61, 30} 5 {1, 2, 4, 5, 6, 7, 9, 10, 14, 17, 21, 29, 47, \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 213 {97, 98, 39, 41, 43, 12, 13, 19, 93, 95} 214 {5, 10, 17, 20, 28, 29, 33, 34, 36, 50, 51, 52\u0026hellip; 214 {97, 35, 69, 40, 74, 45, 20, 21, 62, 31} 215 {1, 8, 15, 17, 18, 25, 30, 33, 42, 44, 47, 52,\u0026hellip; 215 {33, 70, 71, 12, 78, 17, 51, 86, 60, 94} 216 {7, 8, 9, 10, 22, 29, 37, 39, 41, 43, 46, 47, \u0026hellip; 216 {98, 67, 68, 38, 70, 39, 72, 77, 45, 21} 217 {8, 21, 22, 25, 26, 31, 37, 41, 42, 48, 54, 57\u0026hellip; 217 {34, 9, 44, 78, 79, 16, 17, 19, 55, 92} 218 {1, 4, 20, 21, 27, 38, 39, 40, 41, 45, 46, 52,\u0026hellip; 218 rows × 3 columns\nNow, we get the logical conjunction of win and yours, these are our winning numbers. Then, the number of wins is converted to points - for all number of wins bigger than 1, we can get the points by 2**(n_wins-1).\ntxt[\u0026#39;n_wins\u0026#39;] = txt.apply( lambda row: len(row.loc[\u0026#39;win\u0026#39;] \u0026amp; row.loc[\u0026#39;yours\u0026#39;]), axis=1) txt[\u0026#39;points\u0026#39;] = txt.loc[:, \u0026#39;n_wins\u0026#39;].apply( lambda x: 2**(x-1) if x \u0026gt; 1 else x) txt.loc[:, [\u0026#39;win\u0026#39;, \u0026#39;n_wins\u0026#39;, \u0026#39;points\u0026#39;]] win n_wins points 0 {32, 36, 7, 9, 10, 12, 82, 85, 95, 31} 10 512 1 {35, 76, 16, 82, 19, 22, 88, 59, 60, 95} 10 512 2 {1, 70, 11, 78, 48, 19, 52, 88, 28, 94} 5 16 3 {65, 2, 72, 28, 14, 16, 55, 91, 92, 62} 0 0 4 {38, 41, 75, 77, 50, 24, 94, 60, 61, 30} 0 0 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 213 {97, 98, 39, 41, 43, 12, 13, 19, 93, 95} 0 0 214 {97, 35, 69, 40, 74, 45, 20, 21, 62, 31} 0 0 215 {33, 70, 71, 12, 78, 17, 51, 86, 60, 94} 2 2 216 {98, 67, 68, 38, 70, 39, 72, 77, 45, 21} 1 1 217 {34, 9, 44, 78, 79, 16, 17, 19, 55, 92} 0 0 218 rows × 3 columns\nThen, we just sum up:\nsum(txt.loc[:, \u0026#39;points\u0026#39;]) 25004 Part 2 # Let\u0026rsquo;s read the task of part 2! There\u0026rsquo;s no such thing as \u0026ldquo;points\u0026rdquo;. Instead, scratchcards only cause you to win more scratchcards equal to the number of winning numbers you have.\nSpecifically, you win copies of the scratchcards below the winning card equal to the number of matches. So, if card 10 were to have 5 matching numbers, you would win one copy each of cards 11, 12, 13, 14, and 15.\nCopies of scratchcards are scored like normal scratchcards and have the same card number as the card they copied. So, if you win a copy of card 10 and it has 5 matching numbers, it would then win a copy of the same cards that the original card 10 won: cards 11, 12, 13, 14, and 15. This process repeats until none of the copies cause you to win any more cards. (Cards will never make you copy a card past the end of the table.)\nThis time, the above example goes differently:\nCard 1: 41 48 83 86 17 | 83 86 6 31 17 9 48 53 Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19 Card 3: 1 21 53 59 44 | 69 82 63 72 16 21 14 1 Card 4: 41 92 73 84 69 | 59 84 76 51 58 5 54 83 Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36 Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11 Card 1 has four matching numbers, so you win one copy each of the next four cards: cards 2, 3, 4, and 5. Your original card 2 has two matching numbers, so you win one copy each of cards 3 and 4. Your copy of card 2 also wins one copy each of cards 3 and 4. Your four instances of card 3 (one original and three copies) have two matching numbers, so you win four copies each of cards 4 and 5. Your eight instances of card 4 (one original and seven copies) have one matching number, so you win eight copies of card 5. Your fourteen instances of card 5 (one original and thirteen copies) have no matching numbers and win no more cards. Once all of the originals and copies have been processed, you end up with 1 instance of card 1, 2 instances of card 2, 4 instances of card 3, 8 instances of card 4, 14 instances of card 5, and 1 instance of card 6. In total, this example pile of scratchcards causes you to ultimately have 30 scratchcards!\nProcess all of the original and copied scratchcards until no more scratchcards are won. Including the original set of scratchcards, how many total scratchcards do you end up with?\nWe will use the n_wins column we created before and go from there. We step through each Game. Each current game gets +1 card. Then, we step through the number of next games depending on our n_wins. Each of these gets added the card number of the current game.\ntxt[\u0026#39;cards\u0026#39;] = 0 for i, nwin in enumerate(txt.loc[:, \u0026#39;n_wins\u0026#39;]): txt.loc[i, \u0026#39;cards\u0026#39;] += 1 for j in range(1, nwin+1): txt.loc[i+j, \u0026#39;cards\u0026#39;] += txt.loc[i, \u0026#39;cards\u0026#39;] txt.loc[:, [\u0026#39;n_wins\u0026#39;, \u0026#39;cards\u0026#39;]] n_wins cards 0 10 1 1 10 2 2 5 4 3 0 8 4 0 8 \u0026hellip; \u0026hellip; \u0026hellip; 213 0 9608 214 0 8927 215 2 8927 216 1 12636 217 0 21564 218 rows × 2 columns\nNow, we just sum the output again:\nsum(txt[\u0026#39;cards\u0026#39;]) 14427616 "},{"id":6,"href":"/posts/aoc2023-day03/","title":"Advent of code 2023 - Day 3: Gear Ratios","section":"Posts","content":" Table of Contents Part 1 Part 2 This year I try to record my attempt at solving the Advent of Code 2023 riddles. This is Day 3 - see https:adventofcode.com/2023/day/3\nPart 1 # Lets first read the task: The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don\u0026rsquo;t really understand, but apparently any number adjacent to a symbol, even diagonally, is a \u0026ldquo;part number\u0026rdquo; and should be included in your sum. (Periods (.) do not count as a symbol.)\nHere is an example engine schematic:\n467..114.. ...*...... ..35..633. ......#... 617*...... .....+.58. ..592..... ......755. ...$.*.... .664.598.. In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.\nOf course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?\nOkay, let\u0026rsquo;s first get the input as a numpy character array\nimport numpy as np import pandas as pd import sys import matplotlib.pyplot as plt from scipy import ndimage as ndi np.set_printoptions(threshold=sys.maxsize) txt = pd.read_table(\u0026#39;data/2023-12-03-1-aoc.txt\u0026#39;, names=[\u0026#39;code\u0026#39;]) arr = np.chararray((txt.size, txt.size), unicode=True) txt[\u0026#39;code\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].apply(lambda x: [i for i in x]) for i, code in enumerate(txt[\u0026#39;code\u0026#39;]): arr[i, :] = code print((arr[:15, :15])) [[\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;5\u0026#39; \u0026#39;3\u0026#39; \u0026#39;.\u0026#39; \u0026#39;4\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;*\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;7\u0026#39; \u0026#39;2\u0026#39; \u0026#39;6\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;9\u0026#39; \u0026#39;5\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;7\u0026#39; \u0026#39;3\u0026#39; \u0026#39;8\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;*\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;7\u0026#39; \u0026#39;4\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;3\u0026#39; \u0026#39;6\u0026#39; \u0026#39;6\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;*\u0026#39; \u0026#39;1\u0026#39; \u0026#39;2\u0026#39; \u0026#39;6\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;3\u0026#39; \u0026#39;3\u0026#39; \u0026#39;1\u0026#39; \u0026#39;/\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;9\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;/\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;*\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;9\u0026#39; \u0026#39;5\u0026#39; \u0026#39;3\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;3\u0026#39; \u0026#39;5\u0026#39; \u0026#39;5\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;6\u0026#39; \u0026#39;8\u0026#39; \u0026#39;5\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;*\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;7\u0026#39; \u0026#39;0\u0026#39;] [\u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;9\u0026#39; \u0026#39;3\u0026#39; \u0026#39;8\u0026#39; \u0026#39;.\u0026#39; \u0026#39;.\u0026#39; \u0026#39;*\u0026#39;]] /tmp/ipykernel_18336/87086526.py:9: DeprecationWarning: `np.chararray` is deprecated and will be removed from the main namespace in the future. Use an array with a string or bytes dtype instead. arr = np.chararray((txt.size, txt.size), unicode=True) Now extract symbols, digits and the empty space. We use the numpy character methods for that. This way, we create a binary mask for all digits and a binary mask for all empty space (.). The symbols are then every character which is neither.\ndigits = np.char.isdigit(arr) empty = np.char.endswith(arr, \u0026#39;.\u0026#39;) symbols = ~(digits | empty) # just for visualization plt.figure(figsize=(16, 5)) plt.subplot(131, title=\u0026#39;symbols\u0026#39;).matshow(symbols) plt.subplot(132, title=\u0026#39;digits\u0026#39;).matshow(digits) plt.subplot(133, title=\u0026#39;empty\u0026#39;).matshow(empty) plt.show() Now we use the image processing technique of dilation on the symbols mask. So that we get a new mask which covers the surroundings of all symbols. We use this afterwards to check if the digits are near a symbol.\nstruct = ((1, 1, 1), (1, 1, 1), (1, 1, 1)) dilate = ndi.binary_dilation(symbols, structure=struct) plt.figure(figsize=(10, 6)) plt.subplot(121, title=\u0026#39;symbols\u0026#39;).matshow(symbols[:15, :15]) plt.subplot(122, title=\u0026#39;symbols dilated\u0026#39;).matshow(dilate[:15, :15]) plt.show() Creating this masks as before could be understood as a binary segmentation, as each element in our mask is either True or False. To extract the single digits, we\u0026rsquo;ll convert the binary digits segmentation into a instance segmentation, where each connected segment has an own index.\nmarkers, num_features = ndi.label(digits) plt.figure(figsize=(10, 6)) plt.subplot(121, title=\u0026#39;binary segmentation\u0026#39;).matshow( digits[:15, :15]) plt.subplot(122, title=\u0026#39;instance segmentation\u0026#39;).matshow( markers[:15, :15], cmap=\u0026#39;gnuplot\u0026#39;) plt.show() Now, for each instance, we check if the dilated binary mask overlaps with the instance and if yes, we extract the number.\nnumbers = [int(\u0026#39;\u0026#39;.join(arr[markers == i])) for i in range(1, num_features+1) if np.any((markers == i) \u0026amp; dilate)] Then, we just sum up:\nsum(numbers) 527364 Part 2 # Let\u0026rsquo;s first read the second task! The missing part wasn\u0026rsquo;t the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.\nThis time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.\nConsider the same engine schematic again:The missing part wasn\u0026rsquo;t the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.\nThis time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.\nConsider the same engine schematic again:\n467..114.. ...*...... ..35..633. ......#... 617*...... .....+.58. ..592..... ......755. ...$.*.... .664.598.. In this schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.\nWhat is the sum of all of the gear ratios in your engine schematic?\nWe\u0026rsquo;ll use the same method as before, but this time only extract * and create the instance segmentation before the dilation. Why? Because when we dilate first, we could merge two independent gears into one instance.\nprint(markers[2], arr[markers == 17]) [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 17 17 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 18 18 0 0 0 0 19 19 19 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20 20 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 21 21 0 22 22 22 0 0 0 23 23 23 0 0 0 0 0 0 0 0] [\u0026#39;1\u0026#39; \u0026#39;3\u0026#39; \u0026#39;2\u0026#39;] gear = np.char.endswith(arr, \u0026#39;*\u0026#39;) gear_markers, gear_num = ndi.label(gear) plt.figure(figsize=(10, 6)) plt.subplot(131, title=\u0026#39;all symbols dilated\u0026#39;).matshow( symbols[:15, :15]) plt.subplot(132, title=\u0026#39;gears\u0026#39;).matshow( gear[:15, :15]) plt.subplot(133, title=\u0026#39;gears instances\u0026#39;).matshow( gear_markers[:15, :15], cmap=\u0026#39;gnuplot\u0026#39;) plt.show() Now, we step through each gear instance, create a mask for that gear, dilate it, and then step through all digits and check if they are in the gear mask. If we get two digits in the end, we multiply them to get the gear ratio and save the ratios to a list.\ngear_ratios = [] for i in range(1, gear_num+1): gear_binary = gear_markers == i gear_dil = ndi.binary_dilation(gear_binary, structure=struct) part_numbers = [int(\u0026#39;\u0026#39;.join(arr[markers == j])) for j in range(1, num_features+1) if np.any((markers == j) \u0026amp; gear_dil)] if len(part_numbers) == 2: gear_ratios.append(part_numbers[0] * part_numbers[1]) Now, we just sum the output again:\nsum(gear_ratios) 79026871 "},{"id":7,"href":"/posts/aoc2023-day02/","title":"Advent of code 2023 - Day 2: Cube Conundrum","section":"Posts","content":" Table of Contents Part 1 Part 2 This year I try to record my attempt at solving the Advent of Code 2023 riddles. This is Day 2 - see https:adventofcode.com/2023/day/2\nPart 1 # Lets first read the task: As you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He\u0026rsquo;ll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ...) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green In game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?\nOkay, let\u0026rsquo;s load our python kernel in emacs-jupyter and get coding! First of all, let\u0026rsquo;s load the input and split the riddle code by colon : to extract the game id and the rest of the code by semicolon ; to get the number of sets played in each game.\nimport pandas as pd import re txt = pd.read_table(\u0026#39;data/2023-12-02-1-aoc.txt\u0026#39;, names=[\u0026#39;code\u0026#39;]) txt[\u0026#39;id\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].str.split(\u0026#39;:\u0026#39;).apply( lambda x: int(x[0].strip(\u0026#39;Game \u0026#39;))) txt[\u0026#39;code\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].str.split(\u0026#39;:\u0026#39;).apply(lambda x: x[1]) # txt[\u0026#39;code\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].str.split(\u0026#39;;\u0026#39;) # txt[\u0026#39;nsets\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].apply(lambda x: len(x)) txt code id 0 1 green, 1 blue, 1 red; 1 green, 8 red, 7 blu\u0026hellip; 1 1 9 red, 7 green, 3 blue; 15 green, 2 blue, 5 r\u0026hellip; 2 2 3 red, 1 blue, 4 green; 6 red, 3 green, 2 blu\u0026hellip; 3 3 2 blue, 2 green, 19 red; 3 blue, 11 red, 16 g\u0026hellip; 4 4 8 green, 1 red, 12 blue; 10 green, 6 red, 13 \u0026hellip; 5 \u0026hellip; \u0026hellip; \u0026hellip; 95 2 red, 2 green, 1 blue; 1 red, 4 green; 1 green 96 96 4 red, 5 green; 5 blue, 3 red; 8 blue, 2 gree\u0026hellip; 97 97 1 blue; 2 green, 1 red; 5 red, 2 green; 4 red\u0026hellip; 98 98 6 blue, 5 red, 2 green; 9 red, 1 blue; 2 gree\u0026hellip; 99 99 1 blue, 13 green, 14 red; 11 green, 11 blue, \u0026hellip; 100 100 rows × 2 columns\nNow, let\u0026rsquo;s extract the three colors in different columns with regex. We use the lookahead assertion ?= to find the respective colours and only exctract the digits \\d+ coming before. Then we just keep the max imum drawn number of cubes per color, since this is the only information that matters at the moment.\ntxt[\u0026#39;green\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].apply( lambda code: re.findall(r\u0026#39;\\d+(?=.green)\u0026#39;, code)).apply( lambda list: max([int(i) for i in list])) txt[\u0026#39;red\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].apply( lambda code: re.findall(r\u0026#39;\\d+(?=.red)\u0026#39;, code)).apply( lambda list: max([int(i) for i in list])) txt[\u0026#39;blue\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].apply( lambda code: re.findall(r\u0026#39;\\d+(?=.blue)\u0026#39;, code)).apply( lambda list: max([int(i) for i in list])) txt code id green red blue 0 1 green, 1 blue, 1 red; 1 green, 8 red, 7 blu\u0026hellip; 1 2 10 10 1 9 red, 7 green, 3 blue; 15 green, 2 blue, 5 r\u0026hellip; 2 15 10 3 2 3 red, 1 blue, 4 green; 6 red, 3 green, 2 blu\u0026hellip; 3 4 6 16 3 2 blue, 2 green, 19 red; 3 blue, 11 red, 16 g\u0026hellip; 4 16 20 18 4 8 green, 1 red, 12 blue; 10 green, 6 red, 13 \u0026hellip; 5 10 6 14 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 95 2 red, 2 green, 1 blue; 1 red, 4 green; 1 green 96 4 2 1 96 4 red, 5 green; 5 blue, 3 red; 8 blue, 2 gree\u0026hellip; 97 5 4 8 97 1 blue; 2 green, 1 red; 5 red, 2 green; 4 red\u0026hellip; 98 2 5 2 98 6 blue, 5 red, 2 green; 9 red, 1 blue; 2 gree\u0026hellip; 99 2 9 11 99 1 blue, 13 green, 14 red; 11 green, 11 blue, \u0026hellip; 100 13 15 11 100 rows × 5 columns\nLastly, we just filter the DataFrame to only include games where all drawn cubes were below or equal the number of cubes in the game and sum the result!\ntxt[\u0026#39;id\u0026#39;][(txt[\u0026#39;green\u0026#39;] \u0026lt; 14) \u0026amp; (txt[\u0026#39;red\u0026#39;] \u0026lt; 13) \u0026amp; (txt[\u0026#39;blue\u0026#39;] \u0026lt; 15)].sum() 3035 Part 2 # First, let\u0026rsquo;s get the instruction from the second part: As you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\nAgain consider the example games from earlier:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green In game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible. Game 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes. Game 3 must have been played with at least 20 red, 13 green, and 6 blue cubes. Game 4 required at least 14 red, 3 green, and 15 blue cubes. Game 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag. The power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.\nFor each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?\nLuckily, this task is made trivial by the approach we have taken before. We just have to multiply the green, red and blue columns:\ntxt[\u0026#39;power\u0026#39;] = txt.loc[:, \u0026#39;green\u0026#39;] * txt.loc[:, \u0026#39;blue\u0026#39;] * txt.loc[:, \u0026#39;red\u0026#39;] txt code id green red blue power 0 1 green, 1 blue, 1 red; 1 green, 8 red, 7 blu\u0026hellip; 1 2 10 10 200 1 9 red, 7 green, 3 blue; 15 green, 2 blue, 5 r\u0026hellip; 2 15 10 3 450 2 3 red, 1 blue, 4 green; 6 red, 3 green, 2 blu\u0026hellip; 3 4 6 16 384 3 2 blue, 2 green, 19 red; 3 blue, 11 red, 16 g\u0026hellip; 4 16 20 18 5760 4 8 green, 1 red, 12 blue; 10 green, 6 red, 13 \u0026hellip; 5 10 6 14 840 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 95 2 red, 2 green, 1 blue; 1 red, 4 green; 1 green 96 4 2 1 8 96 4 red, 5 green; 5 blue, 3 red; 8 blue, 2 gree\u0026hellip; 97 5 4 8 160 97 1 blue; 2 green, 1 red; 5 red, 2 green; 4 red\u0026hellip; 98 2 5 2 20 98 6 blue, 5 red, 2 green; 9 red, 1 blue; 2 gree\u0026hellip; 99 2 9 11 198 99 1 blue, 13 green, 14 red; 11 green, 11 blue, \u0026hellip; 100 13 15 11 2145 100 rows × 6 columns\nAnd for this one, the sum is:\ntxt[\u0026#39;power\u0026#39;].sum() 66027 "},{"id":8,"href":"/posts/aoc2023-day01/","title":"Advent of code 2023 - Day 1: Trebuchet?!","section":"Posts","content":" Table of Contents Part 1 Part 2 This year I try to record my attempt at solving the Advent of Code 2023 riddles. This is Day 1 - see https:adventofcode.com/2023/day/1\nPart 1 # Our first task is the following: The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2 pqr3stu8vwx a1b2c3d4e5f treb7uchet In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\nLets start jupyter in our shell to start coding!\nconda activate tf jupyter lab --no-browser --port=8888 First, load the test document\nimport pandas as pd import re txt = pd.read_table(\u0026#39;data/2023-12-01-1-aoc.txt\u0026#39;, names=[\u0026#39;code\u0026#39;]) txt code 0 jjfvnnlfivejj1 1 6fourfour 2 ninevbmltwo69 3 pcg91vqrfpxxzzzoneightzt 4 jpprthxgjfive3one1qckhrptpqdc \u0026hellip; \u0026hellip; 995 583sevenhjxlqzjgbzxhkcl5 996 81s 997 2four3threesxxvlfqfive4 998 nine6eightsevenzx9twoxc 999 hmbfjdfnp989mfivefiverpzrjs 1000 rows × 1 columns\nSecond, extract the digits. I had to wrap my head around regex matching in python first, because I first tried pandas.extract (which only extracts the first match), then pandas.extractall (which extracts all matches but puts them into a multiindex which makes things more difficult in this case). So I settled for the re.findall version, which returns a list. To concatenate the elements in the list, we take use the join function.\ntxt[\u0026#39;digits\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].apply( lambda x: \u0026#39;\u0026#39;.join(re.findall(r\u0026#39;(\\d+)\u0026#39;, x))) txt code digits 0 jjfvnnlfivejj1 1 1 6fourfour 6 2 ninevbmltwo69 69 3 pcg91vqrfpxxzzzoneightzt 91 4 jpprthxgjfive3one1qckhrptpqdc 31 \u0026hellip; \u0026hellip; \u0026hellip; 995 583sevenhjxlqzjgbzxhkcl5 5835 996 81s 81 997 2four3threesxxvlfqfive4 234 998 nine6eightsevenzx9twoxc 69 999 hmbfjdfnp989mfivefiverpzrjs 989 1000 rows × 2 columns\nNext, combine the first and the last digit and convert the result from string to integer\ntxt[\u0026#39;calibration\u0026#39;] = txt.loc[:, \u0026#39;digits\u0026#39;].apply( lambda x: int(x[0] + x[-1])) txt code digits calibration 0 jjfvnnlfivejj1 1 11 1 6fourfour 6 66 2 ninevbmltwo69 69 69 3 pcg91vqrfpxxzzzoneightzt 91 91 4 jpprthxgjfive3one1qckhrptpqdc 31 31 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 995 583sevenhjxlqzjgbzxhkcl5 5835 55 996 81s 81 81 997 2four3threesxxvlfqfive4 234 24 998 nine6eightsevenzx9twoxc 69 69 999 hmbfjdfnp989mfivefiverpzrjs 989 99 1000 rows × 3 columns\nLastly, get the sum of our calibration numbers\ntxt.loc[:, \u0026#39;calibration\u0026#39;].sum() 56465 Part 2 # Now follows part two: Your calculation isn\u0026rsquo;t quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid \u0026ldquo;digits\u0026rdquo;.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\ntwo1nine eightwothree abcone2threexyz xtwone3four 4nineeightseven2 zoneight234 7pqrstsixteen In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\nWhat is the sum of all of the calibration values?\nOkay, let\u0026rsquo;s see if we can update the pattern matching. To deal with potential overlapping values like oneight which contains one as well as eight, I used the regex positive lookahead ?= as described here. Because this enables capturing overlapping values, I used \\d (one digit) instead of \\d+ (one or more digits), otherwise digits might double. Afterwards, just replace the spelled out digits with their numerical value.\n# for i, r in enumerate(txt.loc[:, \u0026#39;code\u0026#39;]): # matches = re.findall( # r\u0026#39;(?=(\\d|one|two|three|four|five|six|seven|eight|nine))\u0026#39;, r) # result = \u0026#39;\u0026#39;.join([match for match in matches]) # result = result.replace(\u0026#39;one\u0026#39;, \u0026#39;1\u0026#39;).replace(\u0026#39;two\u0026#39;, \u0026#39;2\u0026#39;).replace( # \u0026#39;three\u0026#39;, \u0026#39;3\u0026#39;).replace(\u0026#39;four\u0026#39;, \u0026#39;4\u0026#39;).replace(\u0026#39;five\u0026#39;, \u0026#39;5\u0026#39;).replace( # \u0026#39;six\u0026#39;, \u0026#39;6\u0026#39;).replace(\u0026#39;seven\u0026#39;, \u0026#39;7\u0026#39;).replace(\u0026#39;eight\u0026#39;, \u0026#39;8\u0026#39;).replace( # \u0026#39;nine\u0026#39;, \u0026#39;9\u0026#39;) # txt.loc[i, \u0026#39;digits2\u0026#39;] = result # txt # a very nice alternative suggested by Tomalak: digits = \u0026#39;\\d one two three four five six seven eight nine\u0026#39;.split() txt[\u0026#39;digits2\u0026#39;] = txt.loc[:, \u0026#39;code\u0026#39;].apply(lambda v: \u0026#39;\u0026#39;.join( str(digits.index(m)) if m in digits else m for m in re.findall(rf\u0026#39;(?=({\u0026#34;|\u0026#34;.join(digits)}))\u0026#39;, v) )) txt code digits calibration digits2 0 jjfvnnlfivejj1 1 11 51 1 6fourfour 6 66 644 2 ninevbmltwo69 69 69 9269 3 pcg91vqrfpxxzzzoneightzt 91 91 9118 4 jpprthxgjfive3one1qckhrptpqdc 31 31 5311 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 995 583sevenhjxlqzjgbzxhkcl5 5835 55 58375 996 81s 81 81 81 997 2four3threesxxvlfqfive4 234 24 243354 998 nine6eightsevenzx9twoxc 69 69 968792 999 hmbfjdfnp989mfivefiverpzrjs 989 99 98955 1000 rows × 4 columns\nNow, construct the calibration value as before\u0026hellip;\ntxt[\u0026#39;calibration2\u0026#39;] = txt.loc[:, \u0026#39;digits2\u0026#39;].apply(lambda x: int(x[0] + x[-1])) txt code digits calibration digits2 calibration2 0 jjfvnnlfivejj1 1 11 51 51 1 6fourfour 6 66 644 64 2 ninevbmltwo69 69 69 9269 99 3 pcg91vqrfpxxzzzoneightzt 91 91 9118 98 4 jpprthxgjfive3one1qckhrptpqdc 31 31 5311 51 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 995 583sevenhjxlqzjgbzxhkcl5 5835 55 58375 55 996 81s 81 81 81 81 997 2four3threesxxvlfqfive4 234 24 243354 24 998 nine6eightsevenzx9twoxc 69 69 968792 92 999 hmbfjdfnp989mfivefiverpzrjs 989 99 98955 95 1000 rows × 5 columns\n\u0026hellip; and get the correct sum!\ntxt.loc[:, \u0026#39;calibration2\u0026#39;].sum() 55902 "}]